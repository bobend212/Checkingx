@page "/checkitem-list"
@inject ICheckItemServiceClient CheckItemService
@inject NavigationManager NavigationManager

<div style="display: flex; justify-content:space-between; margin-bottom: 5px">
    <MudText Typo="Typo.h5">Check Items (@CheckItemService.CheckItemList.Count())</MudText>
    <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Success" @onclick="(() => NewCheckItem())">New Check Item</MudButton>
</div>
<hr />

<MudExpansionPanels MultiExpansion="true">
    @foreach (var itemGroup in CheckItemService.CheckItemList.GroupBy(x => x.Category))
    {
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudText Class="mt-1">@itemGroup.Key.ToUpper() (@itemGroup.Count())</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudList Color="Color.Error">
                    @foreach (var item in itemGroup)
                    {
                        <div style="display: flex; justify-content:space-between">
                            <MudListItem>[@item.Priority] @item.Title</MudListItem>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="(() => UpdateCheckItem(item.CheckItemId))"></MudIconButton>
                        </div>
                    }
                </MudList>
            </ChildContent>
        </MudExpansionPanel>
    }
</MudExpansionPanels>


@code {
    protected override async Task OnInitializedAsync()
    {
        await CheckItemService.GetAllCheckItems();
    }

    void NewCheckItem()
    {
        NavigationManager.NavigateTo("/new-checkItem");
    }

    void UpdateCheckItem(int checkItemId)
    {
        NavigationManager.NavigateTo($"/checkitem/{checkItemId}");
    }
}
