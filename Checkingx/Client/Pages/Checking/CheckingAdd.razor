@page "/checking/new/{projectId:int}"
@inject ICheckItemServiceClient CheckItemService
@inject ICheckingServiceClient CheckingService
@inject NavigationManager NavigationManager

<div style="display: flex; justify-content:space-between; margin-bottom: 5px">
    <MudText Typo="Typo.h4">Checking Process</MudText>
    <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Primary" @onclick="(() => BackToProjects())">Back</MudButton>
</div>

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
    @foreach (var item in checkItems.GroupBy(x => x.Category))
    {
        <MudTabPanel Text="@item.Key.ToUpper()">
            <MudTable Items="@item" Hover="true" Dense="true" Class="mt-2">
                <HeaderContent>
                    <MudTh>Title</MudTh>
                    <MudTh Style="text-align:center">Correct</MudTh>
                    <MudTh Style="text-align:center">Incorrect</MudTh>
                    <MudTh Style="text-align:center">N/A</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Title</MudTd>
                    <MudTd Style="text-align:center"><MudIconButton Icon="@Icons.Material.Outlined.CheckBox" Variant="Variant.Filled" Color="Color.Success" Size="Size.Medium" @onclick="(() => MarkAsCorrectOrNA(context.CheckItemId, false, false))" /></MudTd>
                    <MudTd Style="text-align:center"><MudIconButton Icon="@Icons.Outlined.DisabledByDefault" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" @onclick="(() => ErrorReport(ProjectId, context.CheckItemId))" /></MudTd>
                    <MudTd Style="text-align:center"><MudIconButton Icon="@Icons.Outlined.CheckBoxOutlineBlank" Variant="Variant.Outlined" Color="Color.Info" Size="Size.Medium" @onclick="(() => MarkAsCorrectOrNA(context.CheckItemId, false, true))" /></MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
    }
</MudTabs>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    List<CheckItem> checkItems = new();
    Checking newChecking = new();

    protected override async Task OnInitializedAsync()
    {
        await CheckItemService.GetAllCheckItems_NotChecked(ProjectId);
        checkItems = CheckItemService.CheckItemList;
    }

    async Task MarkAsCorrectOrNA(int checkItemId, bool isErrValue, bool isNAValue)
    {
        newChecking.ProjectId = ProjectId;
        newChecking.CheckItemId = checkItemId;
        newChecking.Description = string.Empty;
        newChecking.IsError = isErrValue;
        newChecking.IsFixed = false;
        newChecking.IsNA = isNAValue;

        await CheckingService.CreateCheckingItem(newChecking);

        await CheckItemService.GetAllCheckItems_NotChecked(ProjectId);
        checkItems = CheckItemService.CheckItemList;
    }

    void ErrorReport(int projectId, int checkItemId)
    {
        NavigationManager.NavigateTo($"/error-report/{projectId}/{checkItemId}");
    }

    void BackToProjects()
    {
        NavigationManager.NavigateTo("/projects");
    }


}
