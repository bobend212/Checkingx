@page "/checking/{id:int}/details"
@inject ICheckingServiceClient CheckingService
@inject NavigationManager NavigationManager
@inject Sotsera.Blazor.Toaster.IToaster Toaster

<div class="card">
    <div class="@CardHeaderStyle(@checking.Status)" style="display: flex; justify-content: space-between">
        <h5>Error Description</h5>
        <h5>checked: @checking.CheckDate.ToString("dd/MMM/yyyy HH:mm")</h5>
        @if (checking.ReviewDate != null)
        {
            <h5>reviewed: @checking.ReviewDate?.ToString("dd/MMM/yyyy HH:mm")</h5>
        }
    </div>
    <div class="card-body">
        <h5 class="card-title">@checking.Description</h5>
        <div>
            @if (checking.Images.Count > 0)
            {
                <MudCarousel Class="mud-width-full" ItemsSource="@checking.Images" Style="height: 650px" AutoCycle="false">
                    <ItemTemplate>
                        <div class="d-flex justify-center" style="height:100%">
                            <MudImage Src="@context.Data" ObjectFit="ObjectFit.Fill"></MudImage>
                        </div>
                    </ItemTemplate>
                </MudCarousel>
            }
        </div>
        <div style="display: flex; justify-content: space-between">
            <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Primary" @onclick="(() => BackToList())">Back to list</MudButton>
            @if (checking.Status == "error")
            {
                <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Tertiary" @onclick="(() => HandleCorrect())">Review & Close</MudButton>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    Checking checking = new Checking();

    protected async override Task OnParametersSetAsync()
    {
        checking = await CheckingService.GetSingleChecking(Id);
    }

    async Task HandleCorrect()
    {
        checking.Status = "fixed";
        await CheckingService.FixError(checking);
        Toaster.Success("Error reviewed");
        NavigationManager.NavigateTo($"/checking/{checking.ProjectId}");
    }

    void BackToList()
    {
        NavigationManager.NavigateTo($"/checking/{checking.ProjectId}");
    }

    private string CardHeaderStyle(string statusValue)
    {
        if (statusValue == "fixed") return "card-header bg-success text-white";
        if (statusValue == "error") return "card-header bg-danger text-white";
        return "card-header";
    }

}
