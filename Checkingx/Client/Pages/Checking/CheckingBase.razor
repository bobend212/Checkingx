@page "/checking/{id:int}"
@inject IProjectServiceClient ProjectService
@inject ICheckingServiceClient CheckingService
@inject NavigationManager NavigationManager

<div style="display: flex; justify-content:space-between" class="mb-5">
    <MudText Typo="Typo.h5">Checking - Review</MudText>
    <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Primary" @onclick="(() => BackToProjects())">Back</MudButton>
</div>
<hr />

@if (checkingList.Count() > 0)
{
    <MudTabs Elevation="2" Rounded="true" Centered="true" Color="@Color.Dark">
        @foreach (var status in checkingList.OrderBy(x => x.Status).GroupBy(x => x.Status))
        {
            <MudTabPanel Text="@status.Key" BadgeData="@status.Count()">
                <MudTable Hover="true" FixedHeader="true"
                  Items="@status"
                  GroupBy="@_groupDefinition"
                  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                  GroupFooterClass="mb-4"
                  Dense="true">
                    <ColGroup>
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <GroupHeaderTemplate>
                        <MudTh Class="mud-table-cell-custom-group" colspan="5">
                            @(
                        $"{context.Key} ({context.Items.Count()})"
                        )
                        </MudTh>
                    </GroupHeaderTemplate>
                    <RowTemplate>
                        <MudTd>@context.CheckItem.Title</MudTd>
                        <MudTd>@context.Status</MudTd>
                        <MudTd Style="text-align: right">
                            @if (context.Status == "error" || context.Status == "fixed")
                            {
                                <MudIconButton Icon="@Icons.Filled.DoubleArrow" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small" @onclick="(() => GoToCheckingDetails(context.CheckingId))" />
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>

            </MudTabPanel>
        }

    </MudTabs>
}
else
{
    <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Success">Checking not found.</MudText>
}

@code {
    [Parameter]
    public int Id { get; set; }

    List<Checking> checkingList = new();

    protected async override Task OnParametersSetAsync()
    {
        await CheckingService.GetAllCheckingsByProject(Id);
        checkingList = CheckingService.CheckingList;
    }

    void GoToCheckingDetails(int id)
    {
        NavigationManager.NavigateTo($"/checking/{id}/details");
    }

    void GoToNewChecking(int id)
    {
        NavigationManager.NavigateTo($"/checking/new/{id}");
    }

    private string StyleForRow_IsCorrected(bool val)
    {
        if (val == true) return "table-info";
        if (val != true) return "table-danger";
        return "table";
    }

    private TableGroupDefinition<Checking> _groupDefinition = new()
        {
            GroupName = "Group",
            Indentation = false,
            Expandable = true,
            Selector = (e) => e.CheckItem.Category
        };

    void BackToProjects()
    {
        NavigationManager.NavigateTo("/projects");
    }
}