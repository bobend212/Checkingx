@page "/checking/{id:int}"
@inject IProjectServiceClient ProjectService
@inject ICheckingServiceClient CheckingService
@inject NavigationManager NavigationManager

<div style="display: flex; justify-content:space-between" class="mb-5">
    <MudText Typo="Typo.h5">Checking - Review</MudText>
    <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Primary" @onclick="(() => BackToProjects())">Back</MudButton>
</div>
<hr />

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
    @if (checkingList.Where(x => x.IsError).Count() > 0)
    {
        <MudTabPanel Text="Errors" />
    }
    <MudTabPanel Text="Fixed" />
    <MudTabPanel Text="Correct" />
    <MudTabPanel Text="N/A" />

</MudTabs>

@if (checkingList.Where(x => x.IsError).Count() > 0)
{
    <MudTable Hover="true" FixedHeader="true"
          Items="@checkingList.Where(x => x.IsError == true)"
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="true">
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>IsError</MudTh>
            <MudTh>IsFixed</MudTh>
            <MudTh>IsNA</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.Key} ({context.Items.Count()})")</MudTh>
            </GroupHeaderTemplate>
            <RowTemplate>
                <MudTd>@context.CheckItem.Title</MudTd>
                <MudTd>@context.IsError</MudTd>
                <MudTd>@context.IsFixed</MudTd>
                <MudTd>@context.IsNA</MudTd>
                <MudTd Style="text-align: right">
                    <MudIconButton Icon="@Icons.Filled.DoubleArrow" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small" @onclick="(() => GoToCheckingDetails(context.CheckingId))" />
                </MudTd>
            </RowTemplate>
            <GroupFooterTemplate>
                <MudTh colspan="5">
                    <MudProgressLinear Color="Color.Warning" Rounded="true" Size="Size.Medium" Value="context.Items.Where(x => x.IsFixed == true).Count()" Class="my-1" Max="context.Items.Where(x => x.IsError == true).Count()"></MudProgressLinear>
                </MudTh>
            </GroupFooterTemplate>
        </MudTable>

    <MudProgressLinear Color="Color.Info" Size="Size.Medium" Value="checkingList.Where(x => x.IsFixed == true).Count()" Rounded="true" Class="my-1 mt-5" Max="checkingList.Where(x => x.IsError == true).Count()">
        <MudText Typo="Typo.overline" Color="Color.Dark">
            total progress
        </MudText>
    </MudProgressLinear>
}
else
{
    <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Success">No errors found.</MudText>
}

@code {
    [Parameter]
    public int Id { get; set; }

    List<Checking> checkingList = new();

    protected async override Task OnParametersSetAsync()
    {
        await CheckingService.GetAllCheckingsByProject(Id);
        checkingList = CheckingService.CheckingList;
    }

    void GoToCheckingDetails(int id)
    {
        NavigationManager.NavigateTo($"/checking/{id}/details");
    }

    void GoToNewChecking(int id)
    {
        NavigationManager.NavigateTo($"/checking/new/{id}");
    }

    private string StyleForRow_IsCorrected(bool val)
    {
        if (val == true) return "table-info";
        if (val != true) return "table-danger";
        return "table";
    }

    private TableGroupDefinition<Checking> _groupDefinition = new()
        {
            GroupName = "Group",
            Indentation = false,
            Expandable = true,
            Selector = (e) => e.CheckItem.Category
        };

    void BackToProjects()
    {
        NavigationManager.NavigateTo("/projects");
    }
}