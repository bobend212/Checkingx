@page "/checking/new/{id:int}"
@inject IProjectServiceClient ProjectService

<h3>CheckingAdd</h3>


@foreach (var item in x.GroupBy(x => x.Category))
{
    <hr />
    <h4>@item.Key.ToUpper()</h4>
    <table class="table table-sm" style="table-layout: fixed; word-wrap: break-word">
        <thead>
            <tr>
                <th style="width: 75%; text-align: left">Title</th>
                <th style="text-align: center">Correct</th>
                <th style="text-align: center">Incorrect</th>
                <th style="text-align: center">Not Applicable</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var checkItem in item)
            {
                <tr>
                    <td>@checkItem.Title</td>
                    <td style="text-align: center"><button class="btn btn-success"><span class="oi oi-check"></span></button></td>
                    <td style="text-align: center"><button class="btn btn-danger"><span class="oi oi-x"></span></button></td>
                    <td style="text-align: center"><button class="btn btn-secondary" @onclick="(() => HandleChecking(Id, checkItem.CheckItemId))">N/A</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int Id { get; set; }

    List<CheckItem> x = new();

    protected override async Task OnInitializedAsync()
    {
        x = await ProjectService.ShowOnlyCheckingsNotCheckedByProject(Id);
    }

    async Task HandleChecking(int projectId, int checkItemId)
    {
        Console.WriteLine($"projID: {projectId}, checkItemId: {checkItemId}");
        //checking.IsCorrected = true;
        //await ProjectService.CorrectError(checking);
        //NavigationManager.NavigateTo($"/checking/{checking.ProjectId}");
    }


}
