@page "/projects"
@inject IProjectServiceClient ProjectService
@inject NavigationManager NavigationManager

@*<div style="display: flex; justify-content:space-between">
    <h3>Projects</h3>
    <button class="btn btn-primary" @onclick="(() => NewProject())"><span class="oi oi-plus"></span></button>
</div>

@if (ProjectService.Projects.Count > 0)
{
    <table class="table table-sm" style="table-layout: fixed; word-wrap: break-word">
        <thead>
            <tr>
                <th></th>
                <th>(id) Project</th>
                <th>Checking Priority</th>
                <th>Errors / Fixed / NA</th>
                <th>Correct</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in ProjectService.Projects)
            {
                <tr>
                    <td><button class="btn btn-primary" @onclick="(() => EditProject(project.ProjectId))"><span class="oi oi-pencil"></span></button></td>
                    <td>(@project.ProjectId) @project.Number @project.Name</td>
                    <td>@project.CheckingPriority</td>
                    <td>@project.Checking.Where(x => x.Status == "error").Count() / @project.Checking.Where(x => x.Status == "fixed").Count() / @project.Checking.Where(x => x.Status == "n/a").Count()</td>
                    <td>@project.Checking.Where(x => x.Status == "ok").Count()</td>
                    <td><button class="btn btn-success" @onclick="(() => GoToChecking(project.ProjectId))">Checking Review</button></td>
                    <td><button class="btn btn-primary" @onclick="(() => GoToCheckingNew(project.ProjectId))">Checking</button></td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h3 class="text-center">Add first project.</h3>
}*@

<div style="display: flex; justify-content:space-between; margin-bottom: 5px">
    <MudText Typo="Typo.h5">Projects</MudText>
    <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Tertiary" @onclick="(() => NewProject())">new project</MudButton>
</div>
<hr />

<MudTable Items="@ProjectService.Projects" Dense="true" Striped="true" Filter="new Func<Project,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString1" Placeholder="Search project" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Project (priority)</MudTh>
        <MudTh Style="text-align:center">Review Progress</MudTh>
        <MudTh Style="text-align:center">OK</MudTh>
        <MudTh Style="text-align:center">N/A</MudTh>
        <MudTh Style="text-align:center"></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd><MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="(() => EditProject(context.ProjectId))"></MudIconButton></MudTd>
        <MudTd>@context.Number @context.Name (@context.CheckingPriority)</MudTd>
        <MudTd Style="text-align:center">
            @if (@RetMax(context.Checking.Where(x => x.Status == "error").Count(), context.Checking.Where(x => x.Status == "fixed").Count()) > 0)
            {
                <MudProgressLinear Color="Color.Info" Size="Size.Small" Class="my-1" Rounded="true" Value="@context.Checking.Where(x => x.Status == "fixed").Count()" Max="@RetMax(context.Checking.Where(x => x.Status == "error").Count(), context.Checking.Where(x => x.Status == "fixed").Count())">
                    <MudText Typo="Typo.subtitle2">
                        <b>@RetPercentage(@RetMax(context.Checking.Where(x => x.Status == "error").Count(), context.Checking.Where(x => x.Status == "fixed").Count()), @context.Checking.Where(x => x.Status == "fixed").Count())%</b>
                    </MudText>
                </MudProgressLinear>
            }
        </MudTd>
        <MudTd Style="text-align:center">@context.Checking.Where(x => x.Status == "ok").Count()</MudTd>
        <MudTd Style="text-align:center">@context.Checking.Where(x => x.Status == "n/a").Count()</MudTd>
        <MudTd>
            <div style="display: flex; justify-content: center">
                @if (context.Checking.Select(x => x.CheckItem).Count() > 0)
                {
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary" EndIcon="@Icons.Filled.Preview" OnClick="(() => GoToChecking(context.ProjectId))">Review</MudButton>
                }
                <MudButton Class="ml-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Success" EndIcon="@Icons.Filled.Checklist" OnClick="(() => GoToCheckingNew(context.ProjectId))">Checking</MudButton>
            </div>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Nothing found.</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" />
    </PagerContent>
</MudTable>


@code {
    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        await ProjectService.GetProjects();
    }

    void EditProject(int id)
    {
        NavigationManager.NavigateTo($"/project/{id}");
    }

    void NewProject()
    {
        NavigationManager.NavigateTo("/new-project");
    }

    void GoToChecking(int id)
    {
        NavigationManager.NavigateTo($"/checking/{id}");
    }

    void GoToCheckingNew(int id)
    {
        NavigationManager.NavigateTo($"/checking/new/{id}");
    }

    private bool FilterFunc1(Project project) => FilterFunc(project, searchString1);

    private bool FilterFunc(Project project, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (project.Number.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (project.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{project.Number} {project.Name}".Contains(searchString))
            return true;
        return false;
    }

    private int RetMax(int a, int b)
    {
        return a + b;
    }

    private double RetPercentage(int max, int val)
    {
        double retValue = ((double)val / (double)max) * 100.0;
        return retValue;
    }
}
